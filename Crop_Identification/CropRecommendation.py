import pandas as pd
import pickle
from matplotlib import pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import log_loss
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
import scikitplot as skplt
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')
import logging
log = logging.getLogger("my-logger")
import os



class CropRecommendation:
    def __init__(self,file_path):
        data = pd.read_csv(file_path)
        self.data = data

    log.info("Data Preprosiing .....")

    def data_preprocessing(self):
        #Renaming the coloumn names 
        self.data.rename(columns={'N':'Nitrogen','P':'Phosphorus','K':'Potassium(K)'},inplace=True)

        #checking for null values
        self.data.isnull().sum() #No null values in the data

        #Rounding the values into two decimal points of the features beacuse it contains many decimal values
        self.data[['temperature','humidity','ph','rainfall']] =  self.data[['temperature','humidity','ph','rainfall']].round(decimals=2)
    
    log.info("Test train Spliting .....")

    def Test_trsin_split(self):
        #empty datframes
        train_dataframe = pd.DataFrame(columns=('Nitrogen','Phosphorus','Potassium(K)','temperature','humidity','ph','rainfall','label'))
        test_dataframe =  pd.DataFrame(columns=('Nitrogen','Phosphorus','Potassium(K)','temperature','humidity','ph','rainfall','label'))
        # equally splitting the data into test train for each class 
        for i in list(self.data['label'].unique()):
            df = self.data[self.data['label']==i]
            #shuffling the data 
            df.sample(frac=1)
            #spliting 70% of the data into train
            train = df[:70]
            train_dataframe = train_dataframe.append(train)
            #spliting 30% of the data into test
            test = df[-30:]
            test_dataframe =test_dataframe.append(test)

    

            self.X_train = train_dataframe.drop('label',axis=1)
            self.y_train = train_dataframe['label']
            self.X_test = test_dataframe.drop('label',axis=1)
            self.y_test = test_dataframe['label']

    log.info("Traing model .....")


    def train(self):
        # training decision tree model
        decison_tree = DecisionTreeClassifier(criterion='gini',splitter='best', ccp_alpha=0.0012185866081969973)
        decison_tree = decison_tree.fit(self.X_train,self.y_train)

        # save the model to disk
        self.filename = 'Crop_recommendation_model.sav'
        pickle.dump(decison_tree, open(self.filename, 'wb'))

        
    log.info("evaluating model .....")

    def Evaluate(self):
        # load the model from disk
        loaded_model = pickle.load(open(self.filename, 'rb'))
        y_true = self.y_test # ground truth labels
        y_pred = loaded_model.predict(self.X_test)# Predicted values of the model
        
        print(f"Accurecy of the model = {accuracy_score(y_true,y_pred)}")
        print(f'Recall score of the model = {recall_score(y_true,y_pred,average ="weighted")}')
        print(f'Precison score of the model = {precision_score(y_true,y_pred,average ="weighted")}')
        
        # ROC AUC curve
        print('plotting ROC AUC curve ..... ')
    
        y_probas =loaded_model.predict_proba(self.X_test)# predicted probabilities generated by sklearn classifier
        skplt.metrics.plot_roc_curve(y_true, y_probas,figsize=(10,10))
        plt.show()

if __name__ == "__main__":
    model = CropRecommendation(os.path.join(os.getcwd(), "data/Crop_recommendation.csv"))
    model.data_preprocessing()
    model.Test_trsin_split()
    model.train()
    model.Evaluate()

    